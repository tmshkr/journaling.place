name: Blue/Green Deployment
permissions:
  id-token: write
  contents: read
on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy to"
        required: true
        default: staging
        options:
          - staging
          - main
      tag:
        type: string
        description: "Tag to deploy"
        required: false
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActions
  DOCKER_IMAGE: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/journaling.place
  DOCKER_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  ENVIRONMENT: ${{ inputs.environment || github.ref_name }}
  TAG: ${{ inputs.tag || github.sha }}

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check-image-exists.outputs.IMAGE_EXISTS }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
      - name: Check if image exists in ECR
        id: check-image-exists
        run: ./scripts/check-image-exists.js ${{ env.TAG }}
      - name: Generate deployment package
        run: ./scripts/generate-deployment-package.sh
        env:
          DOMAIN_NAME: staging.journaling.place
          prep: true
      - name: Prep target env
        id: prep
        uses: tmshkr/blue-green-beanstalk@use-shared-alb
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          disable_termination_protection: true
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          prep: true
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          source_bundle: bundle.zip
          staging_cname: ${{ vars.STAGING_CNAME }}
          version_label: prep-${{ env.TAG }}
          wait_for_deployment: false

  build:
    needs: prep
    if: needs.prep.outputs.image_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
      - name: Setup turbo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64
      - name: Build and load image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          build-args: |
            CDN_PREFIX=https://cdn.journaling.place
          tags: "${{ env.DOCKER_IMAGE }}:${{ env.TAG }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
      - run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ env.DOCKER_REGISTRY }}
          docker push --all-tags ${{ env.DOCKER_IMAGE }}
          docker logout ${{ env.DOCKER_REGISTRY }}
      - name: Export turbo cache
        run: ./scripts/turbo-cache.sh export
      - name: Export static assets to S3
        run: |
          docker run -v ./export:/app/export "${{ env.DOCKER_IMAGE }}:${{ env.TAG }}" sh /app/scripts/export-static-assets.sh
          aws s3 cp --recursive export s3://${{ vars.CDN_BUCKET}}/_next/

  deploy:
    needs: [prep, build]
    if: always() && needs.prep.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
      - name: Generate deployment package
        run: ./scripts/generate-deployment-package.sh
        env:
          DOMAIN_NAME: staging.journaling.place
      - name: Deploy
        uses: tmshkr/blue-green-beanstalk@use-shared-alb
        id: deploy
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          deploy: true
          enable_termination_protection: true
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          source_bundle: bundle.zip
          staging_cname: ${{ vars.STAGING_CNAME }}
          version_description: ${{ github.event.head_commit.message }}
          version_label: ${{ github.ref_name }}-${{ env.TAG }}
      - name: Tag image
        run: ./scripts/tag-image.js
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          SHA: ${{ github.sha }}

  test:
    if: always() && needs.deploy.result == 'success'
    needs: deploy
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-jammy
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 21
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          APP_VERSION: ${{ github.ref_name}}-${{ env.TAG }}
          BASE_URL: https://staging.journaling.place
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: packages/e2e/playwright-report/
          retention-days: 30

  promote:
    if: always() && needs.test.result == 'success' && (inputs.environment == 'main' || github.ref_name == 'main')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
      - run: ./scripts/sub-option-settings.sh
        env:
          DOMAIN_NAME: journaling.place
      - name: Promote
        id: promote
        uses: tmshkr/blue-green-beanstalk@use-shared-alb
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          deploy: true
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          promote: true
          staging_cname: ${{ vars.STAGING_CNAME }}
