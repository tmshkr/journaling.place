name: Blue/Green Deployment
on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy to"
        required: true
        default: staging
        options:
          - staging
          - main
env:
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ENVIRONMENT: ${{ inputs.environment || github.ref_name }}

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check-image-exists.outputs.IMAGE_EXISTS }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to ECR
        run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.DOCKER_REGISTRY }}
      - name: Check if image exists in ECR
        id: check-image-exists
        run: ./scripts/check-image-exists.js ${{ github.sha }}
      - name: Prep target env
        uses: tmshkr/blue-green-beanstalk@dev
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          prep: true
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          staging_cname: ${{ vars.STAGING_CNAME }}
          wait_for_deployment: false

  build:
    needs: prep
    if: needs.prep.outputs.image_exists == 'false'
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/journaling.place:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to ECR
        run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.DOCKER_REGISTRY }}
      - name: Setup turbo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          build-args: |
            CDN_PREFIX=https://cdn.journaling.place
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
      - run: docker push ${{ env.DOCKER_IMAGE }}
      - name: Export turbo cache
        run: ./scripts/turbo-cache.sh export
      - name: Export static assets to S3
        run: |
          docker run -v ./export:/app/export ${{ env.DOCKER_IMAGE }} sh /app/scripts/export-static-assets.sh
          aws s3 cp --recursive export s3://cdn.journaling.place/_next/

  deploy:
    needs: build
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      target_env_cname: ${{ steps.deploy.outputs.target_env_cname }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate deployment package
        run: |
          echo ${{ github.ref_name }} > ENVIRONMENT
          echo ${{ github.sha }} > SHA
          zip -r bundle.zip . -x '*.git*'
      - name: Deploy
        uses: tmshkr/blue-green-beanstalk@dev
        id: deploy
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          deploy: true
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          source_bundle: bundle.zip
          staging_cname: ${{ vars.STAGING_CNAME }}
          version_description: ${{ github.event.head_commit.message }}
          version_label: ${{ github.ref_name }}-${{ github.sha }}
      - name: Tag image
        run: ./scripts/tag-image.js ${{ github.sha }} ${{ github.ref_name }}

  test:
    if: always() && needs.deploy.result == 'success'
    needs: deploy
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-jammy
    steps:
      - uses: actions/checkout@v4
      - name: Setup ngrok-ssh
        uses: tmshkr/ngrok-ssh@latest
        with:
          BASH_PROFILE: ".bash_profile"
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 21
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          APP_VERSION: ${{ github.ref_name}}-${{ github.sha }}
          BASE_URL: https://${{ needs.deploy.outputs.target_env_cname }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: packages/e2e/playwright-report/
          retention-days: 30

  promote:
    if: always() && needs.test.result == 'success' && (inputs.environment == 'main' || github.ref_name == 'main')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Promote
        id: promote
        uses: tmshkr/blue-green-beanstalk@dev
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          deploy: false
          green_env: ${{ vars.GREEN_ENV }}
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          promote: true
          staging_cname: ${{ vars.STAGING_CNAME }}
      - name: Update DNS
        run: |
          curl -X POST "https://${{ secrets.DNS_USERNAME }}:${{ secrets.DNS_PASSWORD }}@domains.google.com/nic/update?hostname=journaling.place&myip=${{ steps.promote.outputs.target_env_endpoint_url }}"
