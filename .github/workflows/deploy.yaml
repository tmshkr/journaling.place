name: Blue/Green Deployment
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - staging
env:
  APP_VERSION: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: ${{ vars.DOCKER_REGISTRY }}/journaling.place
  STAGE: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
  TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.prep.outputs.IMAGE_EXISTS }}
      label_ref_name: ${{ steps.prep.outputs.LABEL_REF_NAME }}
      version_label: ${{ steps.prep.outputs.VERSION_LABEL }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_ACTIONS_ROLE }}
      - id: prep
        name: Deployment prep
        run: ./scripts/deployment-prep.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: deploy
        name: Deploy
        uses: tmshkr/blue-green-beanstalk@send-command
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          deploy: true
          disable_termination_protection: true
          green_env: ${{ vars.GREEN_ENV }}
          option_settings: option-settings.json
          platform_branch_name: "Docker running on 64bit Amazon Linux 2023"
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          source_bundle: bundle.zip
          staging_cname: ${{ vars.STAGING_CNAME }}
          update_listener_rules: true
          version_description: ${{ github.event.head_commit.message }}
          version_label: ${{ steps.prep.outputs.VERSION_LABEL }}
          wait_for_deployment: false

  build:
    needs: deploy
    if: needs.deploy.outputs.image_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_ACTIONS_ROLE }}
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            CDN_PREFIX=https://cdn.journaling.place
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ needs.deploy.outputs.version_label }}
            ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ needs.deploy.outputs.label_ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
      - name: Export turbo cache
        run: ./scripts/turbo-cache.sh export
      - name: Export static assets to S3
        run: |
          docker run -v ./export:/app/export "${{ env.DOCKER_IMAGE }}:${{ env.TAG }}" sh /app/scripts/export-static-assets.sh
          aws s3 cp --recursive export s3://${{ vars.CDN_BUCKET }}/_next/

  test:
    if: always() && needs.deploy.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped')
    needs: [deploy, build]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-jammy
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_ACTIONS_ROLE }}
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: 20
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - name: Wait for environment and update listener rules
        uses: tmshkr/blue-green-beanstalk@send-command
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          green_env: ${{ vars.GREEN_ENV }}
          minimum_health_color: Yellow
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          staging_cname: ${{ vars.STAGING_CNAME }}
          terminate_unhealthy_environment: false
          update_listener_rules: true
      - name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          BASE_URL: https://staging.journaling.place
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: packages/e2e/playwright-report/
          retention-days: 30

  promote:
    if: always() && needs.test.result == 'success' && github.ref_name == 'main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_ACTIONS_ROLE }}
      - run: ./scripts/promote.sh
      - name: Promote
        uses: tmshkr/blue-green-beanstalk@send-command
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          enable_termination_protection: true
          green_env: ${{ vars.GREEN_ENV }}
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          send_command: ./scripts/promote.sh
          staging_cname: ${{ vars.STAGING_CNAME }}
          swap_cnames: true
          update_listener_rules: true

  verify:
    if: always() && needs.promote.result == 'success'
    needs: promote
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-jammy
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_ACTIONS_ROLE }}
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: 20
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - id: test
        name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          BASE_URL: https://journaling.place
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
      - name: Rollback
        if: ${{ failure() && steps.test.conclusion == 'failure' }}
        uses: tmshkr/blue-green-beanstalk@send-command
        with:
          app_name: "journaling.place"
          blue_env: ${{ vars.BLUE_ENV }}
          green_env: ${{ vars.GREEN_ENV }}
          minimum_health_color: Yellow
          production_cname: ${{ vars.PRODUCTION_CNAME }}
          staging_cname: ${{ vars.STAGING_CNAME }}
          swap_cnames: true
          update_listener_rules: true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: packages/e2e/playwright-report/
          retention-days: 30
