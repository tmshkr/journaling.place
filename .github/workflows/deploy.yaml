name: Blue/Green Deployment
on:
  push:
    branches:
      - main
      - staging
env:
  APP_NAME: ${{ vars.APP_NAME }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  BLUE_ENV: ${{ vars.BLUE_ENV }}
  BRANCH: ${{ github.ref_name }}
  GREEN_ENV: ${{ vars.GREEN_ENV }}
  PRODUCTION_CNAME: ${{ vars.PRODUCTION_CNAME }}
  STAGING_CNAME: ${{ vars.STAGING_CNAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare target EB environment
        id: target-env
        run: node get-target-env.js
      - name: Log in to ECR
        run: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 983436253905.dkr.ecr.us-west-2.amazonaws.com
      - name: Check if image exists in ECR
        id: check-image-exists
        run: node check-image-exists.js ${{ github.sha }}
      - name: Build
        if: ${{ steps.check-image-exists.outputs.IMAGE_EXISTS == 'false' }}
        run: |
          docker build -t 983436253905.dkr.ecr.us-west-2.amazonaws.com/journaling.place:${{ github.sha }} .
          docker push 983436253905.dkr.ecr.us-west-2.amazonaws.com/journaling.place:${{ github.sha }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get target EB environment
        id: target-env
        run: node get-target-env.js --wait
      - name: Generate deployment package
        run: echo ${{ github.sha }} >> SHA && node generate-deployment-package.js
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ vars.APP_NAME }}
          environment_name: ${{ steps.target-env.outputs.TARGET_ENV }}
          version_label: ${{ github.ref_name }}-${{ github.sha }}
          version_description: ${{ github.event.head_commit.message }}
          region: ${{ vars.AWS_DEFAULT_REGION }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 60
          use_existing_version_if_available: true
      - name: Swap CNAMEs
        if: ${{ github.ref_name == 'main' }}
        run: |
          aws elasticbeanstalk swap-environment-cnames --source-environment-name ${{ vars.BLUE_ENV }} --destination-environment-name ${{ vars.GREEN_ENV }}
      - name: Update DNS
        if: ${{ github.ref_name == 'main' }}
        env:
          DNS_USERNAME: ${{ secrets.DNS_USERNAME }}
          DNS_PASSWORD: ${{ secrets.DNS_PASSWORD }}
          TARGET_ENV: ${{ steps.target-env.outputs.TARGET_ENV }}
        run: node update-dynamic-dns.js
