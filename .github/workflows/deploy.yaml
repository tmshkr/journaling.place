name: Blue/Green Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
env:
  APP_NAME: ${{ vars.APP_NAME }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  BLUE_ENV: ${{ vars.BLUE_ENV }}
  BRANCH: ${{ github.ref_name }}
  CONFIG_S3_BUCKET: ${{ vars.CONFIG_S3_BUCKET }}
  GREEN_ENV: ${{ vars.GREEN_ENV }}
  PRODUCTION_CNAME: ${{ vars.PRODUCTION_CNAME }}
  STAGING_CNAME: ${{ vars.STAGING_CNAME }}
  STAGING_URL: https://jp-staging.us-west-2.elasticbeanstalk.com/

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare target EB environment
        id: target-env
        run: node scripts/get-target-env.js
      - name: Log in to ECR
        run: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ vars.DOCKER_REGISTRY }}
      - name: Check if image exists in ECR
        id: check-image-exists
        run: node scripts/check-image-exists.js ${{ github.sha }}
      - name: Set up Docker Buildx
        if: ${{ steps.check-image-exists.outputs.IMAGE_EXISTS == 'false' }}
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        if: ${{ steps.check-image-exists.outputs.IMAGE_EXISTS == 'false' }}
        uses: docker/build-push-action@v4
        with:
          push: true
          build-args: |
            CDN_PREFIX=https://cdn.journaling.place
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          tags: ${{ vars.DOCKER_REGISTRY }}/journaling.place:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Get target EB environment
        id: target-env
        run: node scripts/get-target-env.js --wait
      - name: Generate deployment package
        run: echo ${{ github.sha }} >> SHA && node scripts/generate-deployment-package.js
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ vars.APP_NAME }}
          environment_name: ${{ steps.target-env.outputs.TARGET_ENV }}
          version_label: ${{ github.ref_name }}-${{ github.sha }}
          version_description: ${{ github.event.head_commit.message }}
          region: ${{ vars.AWS_DEFAULT_REGION }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 60
          use_existing_version_if_available: true
      - name: Verify Deployment
        env:
          TARGET_ENV: ${{ steps.target-env.outputs.TARGET_ENV }}
          VERSION_LABEL: ${{ github.ref_name }}-${{ github.sha }}
        run: node scripts/verify-deployment.js

  promote:
    needs: deploy
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get target EB environment
        id: target-env
        run: node scripts/get-target-env.js --wait
      - name: Wait for server
        run: ./scripts/wait-for-server.sh $STAGING_URL
      - name: Swap CNAMEs
        run: |
          aws elasticbeanstalk swap-environment-cnames --source-environment-name ${{ vars.BLUE_ENV }} --destination-environment-name ${{ vars.GREEN_ENV }}
      - name: Update DNS
        env:
          DNS_USERNAME: ${{ secrets.DNS_USERNAME }}
          DNS_PASSWORD: ${{ secrets.DNS_PASSWORD }}
          TARGET_ENV: ${{ steps.target-env.outputs.TARGET_ENV }}
        run: node scripts/update-dynamic-dns.js

  test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm install && npx playwright install --with-deps chromium
      - name: Get env file
        run: node scripts/get-env-vars.js
      - name: Run e2e tests
        run: npm run test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: packages/e2e/playwright-report/
          retention-days: 30
