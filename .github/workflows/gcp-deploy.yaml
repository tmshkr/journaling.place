name: GCP Blue/Green Deployment
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        default: "staging"
        options:
          - "staging"
          - "production"
env:
  VERSION_LABEL: ${{ github.ref_name }}.${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          context: .
          load: true
          tags: tmshkr/journaling.place:builder
          target: builder
      - name: Export turbo cache and static assets
        run: ./scripts/docker-export.sh
        env:
          CDN_BUCKET: ${{ vars.CDN_BUCKET }}
      - name: Push runner image
        uses: docker/build-push-action@v6
        with:
          cache-to: type=gha,mode=max
          context: .
          push: true
          tags: |
            tmshkr/journaling.place:${{ env.VERSION_LABEL }}

  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: "actions/checkout@v4"
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
      - uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - run: terraform -chdir=terraform/compute init -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}"
      - run: ./scripts/terraform/deploy.sh
        env:
          BLUE_ENV: ${{ vars.BLUE_ENV }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DOCKER_TAG: ${{ env.VERSION_LABEL }}
          EMAIL_FROM: ${{ vars.EMAIL_FROM }}
          EMAIL_SECRET: ${{ secrets.EMAIL_SECRET }}
          EMAIL_SERVER: ${{ secrets.EMAIL_SERVER }}
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_ZONE: ${{ vars.GCP_ZONE }}
          GREEN_ENV: ${{ vars.GREEN_ENV }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          ORIGIN_CERT: ${{ secrets.ORIGIN_CERT }}
          ORIGIN_KEY: ${{ secrets.ORIGIN_KEY }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
          PRODUCTION_DOMAIN: ${{ vars.PRODUCTION_DOMAIN }}
          STAGING_DOMAIN: ${{ vars.STAGING_DOMAIN }}
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
          TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          VERSION_LABEL: ${{ github.ref_name}}.${{ github.sha }}

  test:
    needs: [deploy, build]
    environment: staging
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.46.0-jammy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: 22
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          BASE_URL: ${{ vars.NEXTAUTH_URL }}
          CF_SKIP_TOKEN: ${{ secrets.CF_SKIP_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
          VERSION_LABEL: ${{ env.VERSION_LABEL }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-test
          path: packages/e2e/playwright-report/
          retention-days: 30

  promote:
    if: inputs.environment == 'production'
    environment: production
    needs: [test]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.46.0-jammy
    steps:
      - uses: "actions/checkout@v4"
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
      - uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - run: terraform -chdir=terraform/compute init -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}"
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: 22
      - name: Install e2e deps
        run: npm run install:ci --workspace=e2e
      - name: Promote
        run: ./scripts/terraform/promote.sh
        env:
          BLUE_ENV: ${{ vars.BLUE_ENV }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DOCKER_TAG: ${{ env.VERSION_LABEL }}
          EMAIL_FROM: ${{ vars.EMAIL_FROM }}
          EMAIL_SECRET: ${{ secrets.EMAIL_SECRET }}
          EMAIL_SERVER: ${{ secrets.EMAIL_SERVER }}
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_ZONE: ${{ vars.GCP_ZONE }}
          GREEN_ENV: ${{ vars.GREEN_ENV }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          ORIGIN_CERT: ${{ secrets.ORIGIN_CERT }}
          ORIGIN_KEY: ${{ secrets.ORIGIN_KEY }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
          PRODUCTION_DOMAIN: ${{ vars.PRODUCTION_DOMAIN }}
          STAGING_DOMAIN: ${{ vars.STAGING_DOMAIN }}
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
          TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          VERSION_LABEL: ${{ github.ref_name}}.${{ github.sha }}
      - name: Run e2e tests
        run: npm run test --workspace=e2e
        env:
          BASE_URL: ${{ vars.NEXTAUTH_URL }}
          CF_SKIP_TOKEN: ${{ secrets.CF_SKIP_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          TEST_USER_EMAIL: ${{ vars.TEST_USER_EMAIL }}
          VERSION_LABEL: ${{ env.VERSION_LABEL }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-promote
          path: packages/e2e/playwright-report/
          retention-days: 30
